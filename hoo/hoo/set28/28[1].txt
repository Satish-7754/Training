28
import java.util.*; 
public class Program28a { 
    public static int findMaxInQueue(Queue<Integer> queue) { 
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder()); 
        for (int num : queue) { 
            maxHeap.add(num); 
        } 
        return maxHeap.peek(); 
    } 
    public static void main(String[] args) { 
        Scanner scanner = new Scanner(System.in); 
        Queue<Integer> queue = new LinkedList<>(); 
        System.out.print("Enter number of elements in the queue: "); 
        int n = scanner.nextInt(); 
        System.out.println("Enter queue elements:"); 
        for (int i = 0; i < n; i++) { 
            queue.add(scanner.nextInt()); 
        } 
        int maxElement = findMaxInQueue(queue); 
        System.out.println("Maximum element in queue: " + maxElement); 
        scanner.close(); 
    } 
} 




import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class StackUsingQueue {

    // Two Queues to simulate a Stack
    private Queue<Integer> queue1;
    private Queue<Integer> queue2;

    // Constructor
    public StackUsingQueue() {
        queue1 = new LinkedList<>();
        queue2 = new LinkedList<>();
    }

    // Push an element onto the stack
    public void push(int value) {
        // Push the value into queue1
        queue1.add(value);
    }

    // Pop the top element from the stack
    public int pop() {
        // If queue1 is empty, the stack is empty
        if (queue1.isEmpty()) {
            System.out.println("Stack is empty.");
            return -1;
        }

        // Transfer all but the last element from queue1 to queue2
        while (queue1.size() > 1) {
            queue2.add(queue1.remove());
        }

        // The last element in queue1 is the top of the stack
        int poppedElement = queue1.remove();

        // Swap the names of queue1 and queue2
        Queue<Integer> temp = queue1;
        queue1 = queue2;
        queue2 = temp;

        return poppedElement;
    }

    // Check if the stack is empty
    public boolean isEmpty() {
        return queue1.isEmpty();
    }

    // Get the top element of the stack without removing it
    public int peek() {
        if (queue1.isEmpty()) {
            System.out.println("Stack is empty.");
            return -1;
        }

        // Transfer all but the last element from queue1 to queue2
        while (queue1.size() > 1) {
            queue2.add(queue1.remove());
        }

        // The last element in queue1 is the top of the stack
        int topElement = queue1.peek();

        // Transfer the last element back to queue1
        queue2.add(queue1.remove());

        // Swap the names of queue1 and queue2
        Queue<Integer> temp = queue1;
        queue1 = queue2;
        queue2 = temp;

        return topElement;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        StackUsingQueue stack = new StackUsingQueue();

        // Menu for the user to interact with the program
        while (true) {
            System.out.println("\nStack Using Queue - Menu");
            System.out.println("1. Push");
            System.out.println("2. Pop");
            System.out.println("3. Peek");
            System.out.println("4. Check if Empty");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter the element to push: ");
                    int value = scanner.nextInt();
                    stack.push(value);
                    System.out.println(value + " pushed to stack.");
                    break;

                case 2:
                    int poppedElement = stack.pop();
                    if (poppedElement != -1) {
                        System.out.println("Popped element: " + poppedElement);
                    }
                    break;

                case 3:
                    int topElement = stack.peek();
                    if (topElement != -1) {
                        System.out.println("Top element: " + topElement);
                    }
                    break;

                case 4:
                    if (stack.isEmpty()) {
                        System.out.println("Stack is empty.");
                    } else {
                        System.out.println("Stack is not empty.");
                    }
                    break;

                case 5:
                    System.out.println("Exiting program...");
                    scanner.close();
                    return;

                default:
                    System.out.println("Invalid choice, please try again.");
            }
        }
    }
}
