39

import java.util.Scanner;

public class LongestDecreasingSubsequence {
    // Function to find the length of the longest strictly decreasing subsequence
    public static int longestDecreasingSubsequence(int[] arr) {
        int n = arr.length;
        int[] dp = new int[n];
        
        // Initialize the dp array, every element is a subsequence of length 1
        for (int i = 0; i < n; i++) {
            dp[i] = 1;
        }

        // Build the dp array from right to left
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                // Check if arr[i] is less than arr[j] and if we can extend the subsequence
                if (arr[i] < arr[j] && dp[i] < dp[j] + 1) {
                    dp[i] = dp[j] + 1;
                }
            }
        }

        // Find the maximum length of the decreasing subsequence
        int maxLength = 0;
        for (int i = 0; i < n; i++) {
            maxLength = Math.max(maxLength, dp[i]);
        }

        return maxLength;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Take input for the array size
        System.out.print("Enter the number of elements in the array: ");
        int n = sc.nextInt();

        // Take input for the array elements
        int[] arr = new int[n];
        System.out.println("Enter the elements of the array: ");
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        // Call the function to find the longest decreasing subsequence
        int result = longestDecreasingSubsequence(arr);
        
        // Print the result
        System.out.println("Length of the longest strictly decreasing subsequence: " + result);
        
        sc.close();
    }
}










import java.util.*;

public class StringSortByFrequency {

    // Method to sort strings based on frequency and lexicographical order
    public static void sortStringsByFrequency(String[] arr) {
        // Create a map to store the frequency of each string
        Map<String, Integer> frequencyMap = new HashMap<>();

        // Count the frequency of each string in the array
        for (String str : arr) {
            frequencyMap.put(str, frequencyMap.getOrDefault(str, 0) + 1);
        }

        // Create a list from the elements of the map
        List<Map.Entry<String, Integer>> list = new ArrayList<>(frequencyMap.entrySet());

        // Sort the list based on frequency and lexicographical order
        list.sort((entry1, entry2) -> {
            int frequencyComparison = entry1.getValue().compareTo(entry2.getValue());
            if (frequencyComparison == 0) {
                return entry1.getKey().compareTo(entry2.getKey());
            }
            return frequencyComparison;
        });

        // Print the sorted strings
        for (Map.Entry<String, Integer> entry : list) {
            System.out.print(entry.getKey() + " ");
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Taking dynamic input for the number of strings
        System.out.print("Enter the number of strings: ");
        int n = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character

        // Taking dynamic input for the array of strings
        String[] arr = new String[n];
        System.out.println("Enter the strings:");
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextLine();
        }

        // Call the method to sort the strings based on frequency
        System.out.println("Sorted strings by frequency and lexicographical order:");
        sortStringsByFrequency(arr);

        scanner.close();
    }
}
