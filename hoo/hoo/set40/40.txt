40a)Basic Stock Buying and Selling (Conceptual)
import java.util.Scanner;

public class StockTrader {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String stockSymbol;
        int quantity;
        double purchasePrice = 0.0;
        boolean hasStock = false;

        System.out.println("Simple Stock Trading Simulation");

        while (true) {
            System.out.println("\nOptions:");
            System.out.println("1. Buy Stock");
            System.out.println("2. Sell Stock");
            System.out.println("3. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    if (hasStock) {
                        System.out.println("You already own stock. Sell before buying more.");
                        break;
                    }
                    System.out.print("Enter the stock symbol: ");
                    stockSymbol = scanner.nextLine();
                    System.out.print("Enter the quantity to buy: ");
                    quantity = scanner.nextInt();
                    System.out.print("Enter the purchase price per share: ");
                    purchasePrice = scanner.nextDouble();
                    scanner.nextLine(); // Consume newline

                    System.out.println("Bought " + quantity + " shares of " + stockSymbol + " at $" + purchasePrice + " per share.");
                    hasStock = true;
                    break;

                case 2:
                    if (!hasStock) {
                        System.out.println("You don't own any stock to sell.");
                        break;
                    }
                    System.out.print("Enter the selling price per share: ");
                    double sellingPrice = scanner.nextDouble();
                    scanner.nextLine(); // Consume newline

                    double profit = (sellingPrice - purchasePrice) * quantity;
                    System.out.println("Sold " + quantity + " shares of the stock for $" + sellingPrice + " per share.");
                    System.out.println("Profit/Loss: $" + String.format("%.2f", profit)); // Format to 2 decimal places
                    hasStock = false;
                    purchasePrice = 0.0; // Reset purchase price
                    break;

                case 3:
                    System.out.println("Exiting the simulation.");
                    scanner.close();
                    return;

                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}






40b) Count Half Nodes in a Binary Search Tree (BST)
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

class Node {
    int data;
    Node left, right;

    public Node(int item) {
        data = item;
        left = right = null;
    }
}

class BST {
    Node root;

    BST() {
        root = null;
    }

    // Method to insert a node into the BST
    Node insert(Node node, int data) {
        if (node == null) {
            return new Node(data);
        }
        if (data < node.data) {
            node.left = insert(node.left, data);
        } else if (data > node.data) {
            node.right = insert(node.right, data);
        }
        return node;
    }

    // Method to count half nodes
    int countHalfNodes(Node node) {
        if (node == null) {
            return 0;
        }

        int count = 0;
        if ((node.left == null && node.right != null) || (node.left != null && node.right == null)) {
            count = 1;
        }

        count += countHalfNodes(node.left);
        count += countHalfNodes(node.right);
        return count;
    }
}

public class CountHalfNodes {
    public static void main(String[] args) {
        BST tree = new BST();
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of nodes to insert into the BST: ");
        int n = scanner.nextInt();

        System.out.println("Enter the values of the nodes (press Enter after each):");
        for (int i = 0; i < n; i++) {
            int value = scanner.nextInt();
            tree.root = tree.insert(tree.root, value);
        }

        int halfNodeCount = tree.countHalfNodes(tree.root);
        System.out.println("Number of half nodes in the BST: " + halfNodeCount);

        scanner.close();
    }
}