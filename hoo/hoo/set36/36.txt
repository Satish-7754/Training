36a) 
import java.util.*; 
public class Program36a { 
    public static void paritySort(int[] arr) { 
        int left = 0, right = arr.length - 1; 
        while (left < right) { 
            if (arr[left] % 2 == 0) { 
                left++; 
            } else if (arr[right] % 2 != 0) { 
                right--; 
            } else { 
                int temp = arr[left]; 
                arr[left] = arr[right]; 
                arr[right] = temp; 
                left++; 
                right--; 
            } 
        } 
    } 
    public static void main(String[] args) { 
        Scanner scanner = new Scanner(System.in); 
        System.out.print("Enter number of elements: "); 
        int n = scanner.nextInt(); 
        int[] arr = new int[n]; 
        System.out.println("Enter array elements:"); 
        for (int i = 0; i < n; i++) { 
            arr[i] = scanner.nextInt(); 
        } 
        paritySort(arr); 
        System.out.println("Sorted array (Even first, Odd last): " + Arrays.toString(arr)); 
        scanner.close(); 
    } 
} 
Output: 
Enter number of elements: 6 
Enter array elements: 
3 1 2 4 5 6 
Sorted array (Even first, Odd last): [6, 4, 2, 1, 5, 3] 
 
36b) 
import java.util.*; 
class TreeNode { 
    int val; 
    TreeNode left, right; 
    TreeNode(int val) { this.val = val; } 
} 
public class Program36b { 
    public static TreeNode insert(TreeNode root, int val) { 
        if (root == null) return new TreeNode(val); 
        if (val < root.val) root.left = insert(root.left, val); 
        else root.right = insert(root.right, val); 
        return root; 
    } 
    public static int diameter(TreeNode root) { 
        int[] diameter = new int[1]; 
        height(root, diameter); 
        return diameter[0]; 
    } 
    private static int height(TreeNode node, int[] diameter) { 
        if (node == null) return 0; 
        int leftHeight = height(node.left, diameter); 
        int rightHeight = height(node.right, diameter); 
        diameter[0] = Math.max(diameter[0], leftHeight + rightHeight); 
        return 1 + Math.max(leftHeight, rightHeight); 
    } 
    public static void main(String[] args) { 
        Scanner scanner = new Scanner(System.in); 
        TreeNode root = null; 
        System.out.print("Enter number of nodes in BST: "); 
        int n = scanner.nextInt(); 
        System.out.println("Enter BST elements:"); 
        for (int i = 0; i < n; i++) { 
            int value = scanner.nextInt(); 
            root = insert(root, value); 
        } 
        int result = diameter(root); 
        System.out.println("Diameter of the BST: " + result); 
        scanner.close(); 
    } 
} 
