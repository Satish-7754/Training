29

import java.util.Scanner;

public class UniquePathsWithObstacles {
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Step 1: Read the dimensions
        System.out.print("Enter number of rows (m): ");
        int m = scanner.nextInt();

        System.out.print("Enter number of columns (n): ");
        int n = scanner.nextInt();

        int[][] obstacleGrid = new int[m][n];

        // Step 2: Input the grid
        System.out.println("Enter the grid values row by row (0 for free, 1 for obstacle):");
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                obstacleGrid[i][j] = scanner.nextInt();
            }
        }

        // Step 3: Calculate unique paths
        int result = uniquePathsWithObstacles(obstacleGrid);
        System.out.println("Number of unique paths: " + result);
    }

    public static int uniquePathsWithObstacles(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;

        // Early exit if start or end is blocked
        if (grid[0][0] == 1 || grid[m - 1][n - 1] == 1) {
            return 0;
        }

        int[][] dp = new int[m][n];

        // Initialize start point
        dp[0][0] = 1;

        // Fill the dp table
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                // Skip the obstacle cell
                if (grid[i][j] == 1) {
                    dp[i][j] = 0;
                } else {
                    if (i > 0) dp[i][j] += dp[i - 1][j];
                    if (j > 0) dp[i][j] += dp[i][j - 1];
                }
            }
        }

        return dp[m - 1][n - 1];
    }
}




import java.util.*;

public class ReverseQueueUsingStack {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Create an empty queue
        Queue<Integer> queue = new LinkedList<>();

        // Get user input for the number of elements
        System.out.print("Enter the number of elements in the queue: ");
        int n = scanner.nextInt();

        // Read the elements and add them to the queue
        System.out.println("Enter " + n + " integers to add to the queue:");
        for (int i = 0; i < n; i++) {
            int value = scanner.nextInt();
            queue.add(value);
        }

        System.out.println("Original Queue: " + queue);

        // Reverse the queue using a stack
        reverseQueue(queue);

        System.out.println("Reversed Queue: " + queue);
    }

    // Function to reverse the queue using a stack
    private static void reverseQueue(Queue<Integer> queue) {
        Stack<Integer> stack = new Stack<>();

        // Step 1: Move all elements from the queue to the stack
        while (!queue.isEmpty()) {
            stack.push(queue.remove());
        }

        // Step 2: Move all elements back from the stack to the queue
        while (!stack.isEmpty()) {
            queue.add(stack.pop());
        }
    }
}







